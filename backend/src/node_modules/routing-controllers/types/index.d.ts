import { CustomParameterDecorator } from 'routing-controllers/types/CustomParameterDecorator';
import { BaseDriver } from 'routing-controllers/types/driver/BaseDriver';
import { MetadataArgsStorage } from 'routing-controllers/types/metadata-builder/MetadataArgsStorage';
import { RoutingControllersOptions } from 'routing-controllers/types/RoutingControllersOptions';
export * from 'routing-controllers/types/container';
export * from 'routing-controllers/types/decorator/All';
export * from 'routing-controllers/types/decorator/Authorized';
export * from 'routing-controllers/types/decorator/Body';
export * from 'routing-controllers/types/decorator/BodyParam';
export * from 'routing-controllers/types/decorator/ContentType';
export * from 'routing-controllers/types/decorator/Controller';
export * from 'routing-controllers/types/decorator/CookieParam';
export * from 'routing-controllers/types/decorator/CookieParams';
export * from 'routing-controllers/types/decorator/Ctx';
export * from 'routing-controllers/types/decorator/CurrentUser';
export * from 'routing-controllers/types/decorator/Delete';
export * from 'routing-controllers/types/decorator/Get';
export * from 'routing-controllers/types/decorator/Head';
export * from 'routing-controllers/types/decorator/Header';
export * from 'routing-controllers/types/decorator/HeaderParam';
export * from 'routing-controllers/types/decorator/HeaderParams';
export * from 'routing-controllers/types/decorator/HttpCode';
export * from 'routing-controllers/types/decorator/Interceptor';
export * from 'routing-controllers/types/decorator/JsonController';
export * from 'routing-controllers/types/decorator/Location';
export * from 'routing-controllers/types/decorator/Method';
export * from 'routing-controllers/types/decorator/Middleware';
export * from 'routing-controllers/types/decorator/OnNull';
export * from 'routing-controllers/types/decorator/OnUndefined';
export * from 'routing-controllers/types/decorator/Param';
export * from 'routing-controllers/types/decorator/Params';
export * from 'routing-controllers/types/decorator/Patch';
export * from 'routing-controllers/types/decorator/Post';
export * from 'routing-controllers/types/decorator/Put';
export * from 'routing-controllers/types/decorator/QueryParam';
export * from 'routing-controllers/types/decorator/QueryParams';
export * from 'routing-controllers/types/decorator/Redirect';
export * from 'routing-controllers/types/decorator/Render';
export * from 'routing-controllers/types/decorator/Req';
export * from 'routing-controllers/types/decorator/Res';
export * from 'routing-controllers/types/decorator/ResponseClassTransformOptions';
export * from 'routing-controllers/types/decorator/Session';
export * from 'routing-controllers/types/decorator/SessionParam';
export * from 'routing-controllers/types/decorator/State';
export * from 'routing-controllers/types/decorator/UploadedFile';
export * from 'routing-controllers/types/decorator/UploadedFiles';
export * from 'routing-controllers/types/decorator/UseAfter';
export * from 'routing-controllers/types/decorator/UseBefore';
export * from 'routing-controllers/types/decorator/UseInterceptor';
export * from 'routing-controllers/types/decorator-options/BodyOptions';
export * from 'routing-controllers/types/decorator-options/ParamOptions';
export * from 'routing-controllers/types/decorator-options/UploadOptions';
export * from 'routing-controllers/types/http-error/HttpError';
export * from 'routing-controllers/types/http-error/InternalServerError';
export * from 'routing-controllers/types/http-error/BadRequestError';
export * from 'routing-controllers/types/http-error/ForbiddenError';
export * from 'routing-controllers/types/http-error/NotAcceptableError';
export * from 'routing-controllers/types/http-error/MethodNotAllowedError';
export * from 'routing-controllers/types/http-error/NotFoundError';
export * from 'routing-controllers/types/http-error/UnauthorizedError';
export * from 'routing-controllers/types/driver/express/ExpressMiddlewareInterface';
export * from 'routing-controllers/types/driver/express/ExpressErrorMiddlewareInterface';
export * from 'routing-controllers/types/driver/koa/KoaMiddlewareInterface';
export * from 'routing-controllers/types/metadata-builder/MetadataArgsStorage';
export * from 'routing-controllers/types/metadata/ActionMetadata';
export * from 'routing-controllers/types/metadata/ControllerMetadata';
export * from 'routing-controllers/types/metadata/InterceptorMetadata';
export * from 'routing-controllers/types/metadata/MiddlewareMetadata';
export * from 'routing-controllers/types/metadata/ParamMetadata';
export * from 'routing-controllers/types/metadata/ResponseHandleMetadata';
export * from 'routing-controllers/types/metadata/UseMetadata';
export * from 'routing-controllers/types/RoutingControllersOptions';
export * from 'routing-controllers/types/CustomParameterDecorator';
export * from 'routing-controllers/types/RoleChecker';
export * from 'routing-controllers/types/Action';
export * from 'routing-controllers/types/InterceptorInterface';
export * from 'routing-controllers/types/driver/BaseDriver';
export * from 'routing-controllers/types/driver/express/ExpressDriver';
export * from 'routing-controllers/types/driver/koa/KoaDriver';
/**
 * Gets metadata args storage.
 * Metadata args storage follows the best practices and stores metadata in a global variable.
 */
export declare function getMetadataArgsStorage(): MetadataArgsStorage;
/**
 * Registers all loaded actions in your express application.
 */
export declare function useExpressServer<T>(expressServer: T, options?: RoutingControllersOptions): T;
/**
 * Registers all loaded actions in your express application.
 */
export declare function createExpressServer(options?: RoutingControllersOptions): any;
/**
 * Registers all loaded actions in your koa application.
 */
export declare function useKoaServer<T>(koaApp: T, options?: RoutingControllersOptions): T;
/**
 * Registers all loaded actions in your koa application.
 */
export declare function createKoaServer(options?: RoutingControllersOptions): any;
/**
 * Registers all loaded actions in your application using selected driver.
 */
export declare function createServer<T extends BaseDriver>(driver: T, options?: RoutingControllersOptions): any;
/**
 * Registers all loaded actions in your express application.
 */
export declare function createExecutor<T extends BaseDriver>(driver: T, options?: RoutingControllersOptions): void;
/**
 * Registers custom parameter decorator used in the controller actions.
 */
export declare function createParamDecorator(options: CustomParameterDecorator): (object: Object, method: string, index: number) => void;
